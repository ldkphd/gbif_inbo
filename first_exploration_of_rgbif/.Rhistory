# open csv file
myDataIn <- read.csv(file="gbif_example.csv", header=TRUE, sep=",")
# MyDataIn <- read.csv(file="gbif_example_typos.csv", header=TRUE, sep=",")  # just to check what will happen if the scientificName does not exist...
# Impressed: keeps running...
# MyDataIn <- read.csv(file="gbif_example_typos_extreme.csv", header=TRUE, sep=",")  # Got the picture
# just have a look
names(myDataIn)
#fix(myDataIn)
# get multiple keys based on csv file
splist <- t(myDataIn$scientificName)[1,]
keys <- sapply(splist, function(x) name_backbone(name=x)$speciesKey, USE.NAMES=FALSE);keys
# -----------------------------------------------------------------------------
# manual test: add columns
# init output dataframe
myDataOut <- myDataIn
splist <- t(myDataIn$scientificName)[1,]
keys <- sapply(splist, function(x) name_backbone(name=x)$speciesKey, USE.NAMES=FALSE) keys
myDataOut$speciesKey   <- sapply(splist, function(x) name_backbone(name=x)$speciesKey, USE.NAMES=FALSE)
myDataOut$usageKey     <- sapply(splist, function(x) name_backbone(name=x)$usageKey, USE.NAMES=FALSE)
myDataOut$rank         <- sapply(splist, function(x) name_backbone(name=x)$rank, USE.NAMES=FALSE)
MyDataOut$status       <- sapply(splist, function(x) name_backbone(name=x)$status, USE.NAMES=FALSE)
MyDataOut$family       <- sapply(splist, function(x) name_backbone(name=x)$family, USE.NAMES=FALSE)
# test issue on duplicate columns...
myDataOut$kingdom       <- sapply(splist, function(x) name_backbone(name=x)$kingdom, USE.NAMES=FALSE)
# risk of overwriting custom data in the input file if user accidentely uses column names in name_backbone attribute list...
# output to csv
write.csv(myDataOut, file = "mydata.csv")
#fix(myDataOut)
# init output dataframe
myDataOut <- myDataIn
splist <- t(myDataIn$scientificName)[1,]
keys <- sapply(splist, function(x) name_backbone(name=x)$speciesKey, USE.NAMES=FALSE);keys
myDataOut$speciesKey   <- sapply(splist, function(x) name_backbone(name=x)$speciesKey, USE.NAMES=FALSE)
myDataOut$usageKey     <- sapply(splist, function(x) name_backbone(name=x)$usageKey, USE.NAMES=FALSE)
myDataOut$rank         <- sapply(splist, function(x) name_backbone(name=x)$rank, USE.NAMES=FALSE)
MyDataOut$status       <- sapply(splist, function(x) name_backbone(name=x)$status, USE.NAMES=FALSE)
MyDataOut$family       <- sapply(splist, function(x) name_backbone(name=x)$family, USE.NAMES=FALSE)
# test issue on duplicate columns...
myDataOut$kingdom       <- sapply(splist, function(x) name_backbone(name=x)$kingdom, USE.NAMES=FALSE)
# risk of overwriting custom data in the input file if user accidentely uses column names in name_backbone attribute list...
# output to csv
write.csv(myDataOut, file = "mydata.csv")
#fix(myDataOut)
# init output dataframe
myDataOut <- myDataIn
splist <- t(myDataIn$scientificName)[1,]
keys <- sapply(splist, function(x) name_backbone(name=x)$speciesKey, USE.NAMES=FALSE);keys
myDataOut$speciesKey   <- sapply(splist, function(x) name_backbone(name=x)$speciesKey, USE.NAMES=FALSE)
myDataOut$usageKey     <- sapply(splist, function(x) name_backbone(name=x)$usageKey, USE.NAMES=FALSE)
myDataOut$rank         <- sapply(splist, function(x) name_backbone(name=x)$rank, USE.NAMES=FALSE)
myDataOut$status       <- sapply(splist, function(x) name_backbone(name=x)$status, USE.NAMES=FALSE)
myDataOut$family       <- sapply(splist, function(x) name_backbone(name=x)$family, USE.NAMES=FALSE)
# test issue on duplicate columns...
myDataOut$kingdom       <- sapply(splist, function(x) name_backbone(name=x)$kingdom, USE.NAMES=FALSE)
# risk of overwriting custom data in the input file if user accidentely uses column names in name_backbone attribute list...
# output to csv
write.csv(myDataOut, file = "mydata.csv")
# partial test code for function
fpathIn = path
fpathOut = NULL
fileOut = TRUE
speciesKey= TRUE
GBIFbackboneCSV_add_ursf <- function(fpathIn, fpathOut = NULL, fileOut = TRUE,
speciesKey= TRUE,
verbose = TRUE, sep=',') {
# Add a standard set of attributes from the GBIF backbone to a csv file.
#
# Args:
#   fpath_in:   File path (file_path/file_name including extension)
#   fpath_out:  File path (file_path/file_name including extension). Default is NULL.
#   file_out:   Write resulting dataframe to new csv file. Default is TRUE.
#   speciesKey: add speciesKey if TRUE, if not, not. Default is TRUE.
#   verbose:    If TRUE, prints sample covariance; if not, not. Default is TRUE.
#   sep:        enables the use of other seperators ('\t' for tab). Default is ','
#
# Returns:
#   1. updated dataframe for direct use in R workspace
#   2. output csv file as user defined name and location or in same directory with a default name change ('_ursf')
dfIn <- read.csv(file=fpathIn, header=TRUE, sep=",")
# Init output df
dfOut <- dfIn
# get keys for all
splist <- t(dfOut$scientificName)[1,]
keys <- sapply(splist, function(x) name_backbone(name=x)$speciesKey, USE.NAMES=FALSE) keys
# add speciedKey if requested
dfOut$speciesKey   <- sapply(splist, function(x) name_backbone(name=x)$speciesKey, USE.NAMES=FALSE)
# add the additional columns (fixed to specific job)
dfOut$usageKey     <- sapply(splist, function(x) name_backbone(name=x)$usageKey, USE.NAMES=FALSE)
dfOut$rank         <- sapply(splist, function(x) name_backbone(name=x)$rank, USE.NAMES=FALSE)
dfOut$status       <- sapply(splist, function(x) name_backbone(name=x)$status, USE.NAMES=FALSE)
dfOut$family       <- sapply(splist, function(x) name_backbone(name=x)$family, USE.NAMES=FALSE)
# risk of overwriting custom data
TODO(ldekonin): "maybe prevent overwrite of duplicate columns and add matching warning at function output"
# output to csv
if(is.null(fpathOut) & fileOut) {
new_basepath = file.path(dirname(fpathIn), paste(file_path_sans_ext(basename(fpathIn)),'_ursf', '.', file_ext(basename(fpathIn)), sep=''), fsep = .Platform$file.sep)
}
write.csv(dfOut, file = new_basepath, sep = sep)
# Error handling
if (verbose)
cat("CSV add ursf", nrow(dfOut), ".\n", sep = "")
return(dfOut)
}
GBIFbackboneCSV_add_ursf <- function(fpathIn, fpathOut = NULL, fileOut = TRUE,
speciesKey= TRUE,
verbose = TRUE, sep=',') {
# Add a standard set of attributes from the GBIF backbone to a csv file.
#
# Args:
#   fpath_in:   File path (file_path/file_name including extension)
#   fpath_out:  File path (file_path/file_name including extension). Default is NULL.
#   file_out:   Write resulting dataframe to new csv file. Default is TRUE.
#   speciesKey: add speciesKey if TRUE, if not, not. Default is TRUE.
#   verbose:    If TRUE, prints sample covariance; if not, not. Default is TRUE.
#   sep:        enables the use of other seperators ('\t' for tab). Default is ','
#
# Returns:
#   1. updated dataframe for direct use in R workspace
#   2. output csv file as user defined name and location or in same directory with a default name change ('_ursf')
dfIn <- read.csv(file=fpathIn, header=TRUE, sep=",")
# Init output df
dfOut <- dfIn
# get keys for all
splist <- t(dfOut$scientificName)[1,]
keys <- sapply(splist, function(x) name_backbone(name=x)$speciesKey, USE.NAMES=FALSE) keys
# add speciedKey if requested
dfOut$speciesKey   <- sapply(splist, function(x) name_backbone(name=x)$speciesKey, USE.NAMES=FALSE)
# add the additional columns (fixed to specific job)
dfOut$usageKey     <- sapply(splist, function(x) name_backbone(name=x)$usageKey, USE.NAMES=FALSE)
dfOut$rank         <- sapply(splist, function(x) name_backbone(name=x)$rank, USE.NAMES=FALSE)
dfOut$status       <- sapply(splist, function(x) name_backbone(name=x)$status, USE.NAMES=FALSE)
dfOut$family       <- sapply(splist, function(x) name_backbone(name=x)$family, USE.NAMES=FALSE)
# risk of overwriting custom data
# TODO(ldekonin): maybe prevent overwrite of duplicate columns and add matching warning at function output
# output to csv
if(is.null(fpathOut) & fileOut) {
new_basepath = file.path(dirname(fpathIn), paste(file_path_sans_ext(basename(fpathIn)),'_ursf', '.', file_ext(basename(fpathIn)), sep=''), fsep = .Platform$file.sep)
}
write.csv(dfOut, file = new_basepath, sep = sep)
# Error handling
if (verbose)
cat("CSV add ursf", nrow(dfOut), ".\n", sep = "")
return(dfOut)
}
fpathIn = path
fpathOut = NULL
fileOut = TRUE
speciesKey= TRUE
dfIn <- read.csv(file=fpathIn, header=TRUE, sep=",")
dfOut <- dfIn
splist <- t(dfOut$scientificName)[1,]
keys <- sapply(splist, function(x) name_backbone(name=x)$speciesKey, USE.NAMES=FALSE)
dfOut$speciesKey   <- sapply(splist, function(x) name_backbone(name=x)$speciesKey, USE.NAMES=FALSE)
dfOut$usageKey     <- sapply(splist, function(x) name_backbone(name=x)$usageKey, USE.NAMES=FALSE)
dfOut$rank         <- sapply(splist, function(x) name_backbone(name=x)$rank, USE.NAMES=FALSE)
dfOut$status       <- sapply(splist, function(x) name_backbone(name=x)$status, USE.NAMES=FALSE)
dfOut$family       <- sapply(splist, function(x) name_backbone(name=x)$family, USE.NAMES=FALSE)
if(is.null(fpathOut) & fileOut) {
new_basepath = file.path(dirname(fpathIn), paste(file_path_sans_ext(basename(fpathIn)),'_ursf', '.', file_ext(basename(fpathIn)), sep=''), fsep = .Platform$file.sep)
}
write.csv(dfOut, file = new_basepath, sep = sep)
if (verbose)
cat("CSV add ursf", nrow(dfOut), ".\n", sep = "")
# partial test code for function
fpathIn = path
fpathOut = NULL
fileOut = TRUE
speciesKey= TRUE
verbose = TRUE
dfIn <- read.csv(file=fpathIn, header=TRUE, sep=",")
# Init output df
dfOut <- dfIn
# get keys for all
splist <- t(dfOut$scientificName)[1,]
keys <- sapply(splist, function(x) name_backbone(name=x)$speciesKey, USE.NAMES=FALSE)
# add speciedKey if requested
dfOut$speciesKey   <- sapply(splist, function(x) name_backbone(name=x)$speciesKey, USE.NAMES=FALSE)
# add the additional columns (fixed to specific job)
dfOut$usageKey     <- sapply(splist, function(x) name_backbone(name=x)$usageKey, USE.NAMES=FALSE)
dfOut$rank         <- sapply(splist, function(x) name_backbone(name=x)$rank, USE.NAMES=FALSE)
dfOut$status       <- sapply(splist, function(x) name_backbone(name=x)$status, USE.NAMES=FALSE)
dfOut$family       <- sapply(splist, function(x) name_backbone(name=x)$family, USE.NAMES=FALSE)
# risk of overwriting custom data
# TODO(ldekonin): maybe prevent overwrite of duplicate columns and add matching warning at function output
# output to csv
if(is.null(fpathOut) & fileOut) {
new_basepath = file.path(dirname(fpathIn), paste(file_path_sans_ext(basename(fpathIn)),'_ursf', '.', file_ext(basename(fpathIn)), sep=''), fsep = .Platform$file.sep)
}
write.csv(dfOut, file = new_basepath, sep = sep)
# Error handling
if (verbose)
cat("CSV add ursf", nrow(dfOut), ".\n", sep = "")
write.table(dfOut, file = new_basepath, sep = sep)
sep = ','
write.table(dfOut, file = new_basepath, sep = sep)
?read.csv
dfIn <- read.table(file=fpathIn, header=TRUE, sep=",")
# Init output df
dfOut <- dfIn
# get keys for all
splist <- t(dfOut$scientificName)[1,]
keys <- sapply(splist, function(x) name_backbone(name=x)$speciesKey, USE.NAMES=FALSE)
# add speciedKey if requested
dfOut$speciesKey   <- sapply(splist, function(x) name_backbone(name=x)$speciesKey, USE.NAMES=FALSE)
# add the additional columns (fixed to specific job)
dfOut$usageKey     <- sapply(splist, function(x) name_backbone(name=x)$usageKey, USE.NAMES=FALSE)
dfOut$rank         <- sapply(splist, function(x) name_backbone(name=x)$rank, USE.NAMES=FALSE)
dfOut$status       <- sapply(splist, function(x) name_backbone(name=x)$status, USE.NAMES=FALSE)
dfOut$family       <- sapply(splist, function(x) name_backbone(name=x)$family, USE.NAMES=FALSE)
# risk of overwriting custom data
# TODO(ldekonin): maybe prevent overwrite of duplicate columns and add matching warning at function output
# output to csv
if(is.null(fpathOut) & fileOut) {
new_basepath = file.path(dirname(fpathIn), paste(file_path_sans_ext(basename(fpathIn)),'_ursf', '.', file_ext(basename(fpathIn)), sep=''), fsep = .Platform$file.sep)
}
write.table(dfOut, file = new_basepath, sep = sep)
# Error handling
if (verbose)
cat("CSV add ursf", nrow(dfOut), ".\n", sep = "")
GBIFbackboneCSV_add_ursf <- function(fpathIn, fpathOut = NULL, fileOut = TRUE,
speciesKey= TRUE,
verbose = TRUE, sep=',') {
# Add a standard set of attributes from the GBIF backbone to a csv file.
#
# Args:
#   fpath_in:   File path (file_path/file_name including extension)
#   fpath_out:  File path (file_path/file_name including extension). Default is NULL.
#   file_out:   Write resulting dataframe to new csv file. Default is TRUE.
#   speciesKey: add speciesKey if TRUE, if not, not. Default is TRUE.
#   verbose:    If TRUE, prints sample covariance; if not, not. Default is TRUE.
#   sep:        enables the use of other seperators ('\t' for tab). Default is ','
#
# Returns:
#   1. updated dataframe for direct use in R workspace
#   2. output csv file as user defined name and location or in same directory with a default name change ('_ursf')
dfIn <- read.table(file=fpathIn, header=TRUE, sep=",")
# Init output df
dfOut <- dfIn
# get keys for all
splist <- t(dfOut$scientificName)[1,]
keys <- sapply(splist, function(x) name_backbone(name=x)$speciesKey, USE.NAMES=FALSE)
# add speciedKey if requested
dfOut$speciesKey   <- sapply(splist, function(x) name_backbone(name=x)$speciesKey, USE.NAMES=FALSE)
# add the additional columns (fixed to specific job)
dfOut$usageKey     <- sapply(splist, function(x) name_backbone(name=x)$usageKey, USE.NAMES=FALSE)
dfOut$rank         <- sapply(splist, function(x) name_backbone(name=x)$rank, USE.NAMES=FALSE)
dfOut$status       <- sapply(splist, function(x) name_backbone(name=x)$status, USE.NAMES=FALSE)
dfOut$family       <- sapply(splist, function(x) name_backbone(name=x)$family, USE.NAMES=FALSE)
# risk of overwriting custom data
# TODO(ldekonin): maybe prevent overwrite of duplicate columns and add matching warning at function output
# output to csv
if(is.null(fpathOut) & fileOut) {
new_basepath = file.path(dirname(fpathIn), paste(file_path_sans_ext(basename(fpathIn)),'_ursf', '.', file_ext(basename(fpathIn)), sep=''), fsep = .Platform$file.sep)
}
write.table(dfOut, file = new_basepath, sep = sep)
# Error handling
if (verbose)
cat("CSV add ursf to", nrow(dfOut), "rows.\n", sep = " ")
return(dfOut)
}
GBIFbackboneCSV_add_ursf(fpathIn)
fpathIn = path
fpathOut = NULL
fileOut = TRUE
speciesKey= TRUE
verbose = TRUE
sep = ','
# test 1
GBIFbackboneCSV_add_ursf(fpathIn)
# test 2: test verbose
result = GBIFbackboneCSV_add_ursf(fpathIn)
# test 3: custom name of file
GBIFbackboneCSV_add_ursf(fpathIn, fpathOut = file.path(dirname(fpathIn), 'test_file_name.csv', fsep = .Platform$file.sep))
GBIFbackboneCSV_add_ursf <- function(fpathIn, fpathOut = NULL, fileOut = TRUE,
speciesKey= TRUE,
verbose = TRUE, sep=',') {
# Add a standard set of attributes from the GBIF backbone to a csv file.
#
# Args:
#   fpath_in:   File path (file_path/file_name including extension)
#   fpath_out:  File path (file_path/file_name including extension). Default is NULL.
#   file_out:   Write resulting dataframe to new csv file. Default is TRUE.
#   speciesKey: add speciesKey if TRUE, if not, not. Default is TRUE.
#   verbose:    If TRUE, prints sample covariance; if not, not. Default is TRUE.
#   sep:        enables the use of other seperators ('\t' for tab). Default is ','
#
# Returns:
#   1. updated dataframe for direct use in R workspace
#   2. output csv file as user defined name and location or in same directory with a default name change ('_ursf')
dfIn <- read.table(file=fpathIn, header=TRUE, sep=",")
# Init output df
dfOut <- dfIn
# get keys for all
splist <- t(dfOut$scientificName)[1,]
keys <- sapply(splist, function(x) name_backbone(name=x)$speciesKey, USE.NAMES=FALSE)
# add speciedKey if requested
dfOut$speciesKey   <- sapply(splist, function(x) name_backbone(name=x)$speciesKey, USE.NAMES=FALSE)
# add the additional columns (fixed to specific job)
dfOut$usageKey     <- sapply(splist, function(x) name_backbone(name=x)$usageKey, USE.NAMES=FALSE)
dfOut$rank         <- sapply(splist, function(x) name_backbone(name=x)$rank, USE.NAMES=FALSE)
dfOut$status       <- sapply(splist, function(x) name_backbone(name=x)$status, USE.NAMES=FALSE)
dfOut$family       <- sapply(splist, function(x) name_backbone(name=x)$family, USE.NAMES=FALSE)
# risk of overwriting custom data
# TODO(ldekonin): maybe prevent overwrite of duplicate columns and add matching warning at function output
# output to csv
if(is.null(fpathOut) & fileOut) {
new_basepath = file.path(dirname(fpathIn), paste(file_path_sans_ext(basename(fpathIn)),'_ursf', '.', file_ext(basename(fpathIn)), sep=''), fsep = .Platform$file.sep)
}
write.table(dfOut, file = new_basepath, sep = sep)
# Error handling
if (verbose)
cat("Added ursf to CSV for", nrow(dfOut), "rows.\n", sep = " ")
cat("Success rate", nrow(na.omit(dfOut)), "rows.\n", sep = " ")
return(dfOut)
}
GBIFbackboneCSV_add_ursf <- function(fpathIn, fpathOut = NULL, fileOut = TRUE,
speciesKey= TRUE,
verbose = TRUE, sep=',') {
# Add a standard set of attributes from the GBIF backbone to a csv file.
#
# Args:
#   fpath_in:   File path (file_path/file_name including extension)
#   fpath_out:  File path (file_path/file_name including extension). Default is NULL.
#   file_out:   Write resulting dataframe to new csv file. Default is TRUE.
#   speciesKey: add speciesKey if TRUE, if not, not. Default is TRUE.
#   verbose:    If TRUE, prints sample covariance; if not, not. Default is TRUE.
#   sep:        enables the use of other seperators ('\t' for tab). Default is ','
#
# Returns:
#   1. updated dataframe for direct use in R workspace
#   2. output csv file as user defined name and location or in same directory with a default name change ('_ursf')
dfIn <- read.table(file=fpathIn, header=TRUE, sep=",")
# Init output df
dfOut <- dfIn
# get keys for all
splist <- t(dfOut$scientificName)[1,]
keys <- sapply(splist, function(x) name_backbone(name=x)$speciesKey, USE.NAMES=FALSE)
# add speciedKey if requested
dfOut$speciesKey   <- sapply(splist, function(x) name_backbone(name=x)$speciesKey, USE.NAMES=FALSE)
# add the additional columns (fixed to specific job)
dfOut$usageKey     <- sapply(splist, function(x) name_backbone(name=x)$usageKey, USE.NAMES=FALSE)
dfOut$rank         <- sapply(splist, function(x) name_backbone(name=x)$rank, USE.NAMES=FALSE)
dfOut$status       <- sapply(splist, function(x) name_backbone(name=x)$status, USE.NAMES=FALSE)
dfOut$family       <- sapply(splist, function(x) name_backbone(name=x)$family, USE.NAMES=FALSE)
# risk of overwriting custom data
# TODO(ldekonin): maybe prevent overwrite of duplicate columns and add matching warning at function output
# output to csv
if(is.null(fpathOut) & fileOut) {
new_basepath = file.path(dirname(fpathIn), paste(file_path_sans_ext(basename(fpathIn)),'_ursf', '.', file_ext(basename(fpathIn)), sep=''), fsep = .Platform$file.sep)
}
write.table(dfOut, file = new_basepath, sep = sep)
# Error handling
if (verbose)
cat("Added ursf to CSV for", nrow(dfOut), "rows.\n", sep = " ")
cat("Success rate", nrow(na.omit(dfOut)), "rows.\n", sep = " ")
return(dfOut)
}
GBIFbackboneCSV_add_ursf(fpathIn)
cat("Success rate", nrow(na.omit(dfOut))/nrow(dfOut), ", ", /nrow(dfOut) - nrow(na.omit(dfOut)), "errors.\n", sep = " ")
cat("Success rate", nrow(na.omit(dfOut))/nrow(dfOut), ", "row(dfOut) - nrow(na.omit(dfOut)), "errors.\n", sep = " ")
cat("Success rate", nrow(na.omit(dfOut))/nrow(dfOut), ", ", row(dfOut) - nrow(na.omit(dfOut)), "errors.\n", sep = " ")
nrow(na.omit(dfOut))
nrow(dfOut)
row(dfOut) - nrow(na.omit(dfOut))
cat("Success rate", nrow(na.omit(dfOut))/nrow(dfOut), ", ", nrow(dfOut) - nrow(na.omit(dfOut)), "errors.\n", sep = " ")
nrow(na.omit(dfOut)) != nrow(dfOut)
if (nrow(na.omit(dfOut)) != nrow(dfOut))
cat("Success rate", nrow(na.omit(dfOut))/nrow(dfOut), ", ", nrow(dfOut) - nrow(na.omit(dfOut)), "errors.\n", sep = " ")
GBIFbackboneCSV_add_ursf <- function(fpathIn, fpathOut = NULL, fileOut = TRUE,
speciesKey= TRUE,
verbose = TRUE, sep=',') {
# Add a standard set of attributes from the GBIF backbone to a csv file.
#
# Args:
#   fpath_in:   File path (file_path/file_name including extension)
#   fpath_out:  File path (file_path/file_name including extension). Default is NULL.
#   file_out:   Write resulting dataframe to new csv file. Default is TRUE.
#   speciesKey: add speciesKey if TRUE, if not, not. Default is TRUE.
#   verbose:    If TRUE, prints sample covariance; if not, not. Default is TRUE.
#   sep:        enables the use of other seperators ('\t' for tab). Default is ','
#
# Returns:
#   1. updated dataframe for direct use in R workspace
#   2. output csv file as user defined name and location or in same directory with a default name change ('_ursf')
dfIn <- read.table(file=fpathIn, header=TRUE, sep=",")
# Init output df
dfOut <- dfIn
# get keys for all
splist <- t(dfOut$scientificName)[1,]
keys <- sapply(splist, function(x) name_backbone(name=x)$speciesKey, USE.NAMES=FALSE)
# add speciedKey if requested
dfOut$speciesKey   <- sapply(splist, function(x) name_backbone(name=x)$speciesKey, USE.NAMES=FALSE)
# add the additional columns (fixed to specific job)
dfOut$usageKey     <- sapply(splist, function(x) name_backbone(name=x)$usageKey, USE.NAMES=FALSE)
dfOut$rank         <- sapply(splist, function(x) name_backbone(name=x)$rank, USE.NAMES=FALSE)
dfOut$status       <- sapply(splist, function(x) name_backbone(name=x)$status, USE.NAMES=FALSE)
dfOut$family       <- sapply(splist, function(x) name_backbone(name=x)$family, USE.NAMES=FALSE)
# risk of overwriting custom data
# TODO(ldekonin): maybe prevent overwrite of duplicate columns and add matching warning at function output
# output to csv
if(is.null(fpathOut) & fileOut) {
new_basepath = file.path(dirname(fpathIn), paste(file_path_sans_ext(basename(fpathIn)),'_ursf', '.', file_ext(basename(fpathIn)), sep=''), fsep = .Platform$file.sep)
}
write.table(dfOut, file = new_basepath, sep = sep)
# Error handling
if (verbose)
cat("Added ursf to CSV for", nrow(dfOut), "rows.\n", sep = " ")
if (nrow(na.omit(dfOut)) != nrow(dfOut))
cat("Success rate", nrow(na.omit(dfOut))/nrow(dfOut), ", ", nrow(dfOut) - nrow(na.omit(dfOut)), "errors.\n", sep = " ")
return(dfOut)
}
GBIFbackboneCSV_add_ursf(fpathIn)
result = GBIFbackboneCSV_add_ursf(fpathIn)
GBIFbackboneCSV_add_ursf(fpathIn, fpathOut = file.path(dirname(fpathIn), 'test_file_name.csv', fsep = .Platform$file.sep))
a=2
verbose = FALSE
GBIFbackboneCSV_add_ursf(fpathIn)
GBIFbackboneCSV_add_ursf <- function(fpathIn, fpathOut = NULL, fileOut = TRUE,
speciesKey= TRUE,
verbose = TRUE, sep=',') {
# Add a standard set of attributes from the GBIF backbone to a csv file.
#
# Args:
#   fpath_in:   File path (file_path/file_name including extension)
#   fpath_out:  File path (file_path/file_name including extension). Default is NULL.
#   file_out:   Write resulting dataframe to new csv file. Default is TRUE.
#   speciesKey: add speciesKey if TRUE, if not, not. Default is TRUE.
#   verbose:    If TRUE, prints sample covariance; if not, not. Default is TRUE.
#   sep:        enables the use of other seperators ('\t' for tab). Default is ','
#
# Returns:
#   1. updated dataframe for direct use in R workspace
#   2. output csv file as user defined name and location or in same directory with a default name change ('_ursf')
dfIn <- read.table(file=fpathIn, header=TRUE, sep=",")
# Init output df
dfOut <- dfIn
# get keys for all
splist <- t(dfOut$scientificName)[1,]
keys <- sapply(splist, function(x) name_backbone(name=x)$speciesKey, USE.NAMES=FALSE)
# add speciedKey if requested
dfOut$speciesKey   <- sapply(splist, function(x) name_backbone(name=x)$speciesKey, USE.NAMES=FALSE)
# add the additional columns (fixed to specific job)
dfOut$usageKey     <- sapply(splist, function(x) name_backbone(name=x)$usageKey, USE.NAMES=FALSE)
dfOut$rank         <- sapply(splist, function(x) name_backbone(name=x)$rank, USE.NAMES=FALSE)
dfOut$status       <- sapply(splist, function(x) name_backbone(name=x)$status, USE.NAMES=FALSE)
dfOut$family       <- sapply(splist, function(x) name_backbone(name=x)$family, USE.NAMES=FALSE)
# risk of overwriting custom data
# TODO(ldekonin): maybe prevent overwrite of duplicate columns and add matching warning at function output
# output to csv
if(is.null(fpathOut) & fileOut) {
new_basepath = file.path(dirname(fpathIn), paste(file_path_sans_ext(basename(fpathIn)),'_ursf', '.', file_ext(basename(fpathIn)), sep=''), fsep = .Platform$file.sep)
}
write.table(dfOut, file = new_basepath, sep = sep)
# Error handling
if (verbose)
cat("Added ursf to CSV for", nrow(dfOut), "rows.\n", sep = " ")
if (nrow(na.omit(dfOut)) != nrow(dfOut))
cat("Success rate", nrow(na.omit(dfOut))/nrow(dfOut), ", ", nrow(dfOut) - nrow(na.omit(dfOut)), "errors.\n", sep = " ")
return(dfOut)
}
# partial test code for function
fpathIn = path
fpathOut = NULL
fileOut = TRUE
speciesKey= TRUE
verbose = FALSE
sep = ','
# test 1
GBIFbackboneCSV_add_ursf(fpathIn)
path ='C:/Users/LucAdmin/Documents/GitHub/gbif_inbo/first_exploration_of_rgbif/gbif_example.csv'
# partial test code for function
fpathIn = path
fpathOut = NULL
fileOut = TRUE
speciesKey= TRUE
verbose = FALSE
sep = ','
# test 1
GBIFbackboneCSV_add_ursf(fpathIn)
# test 2: test verbose
result = GBIFbackboneCSV_add_ursf(fpathIn)
path ='C:/Users/LucAdmin/Documents/GitHub/gbif_inbo/first_exploration_of_rgbif/gbif_example_typos_extreme.csv'
path ='C:/Users/LucAdmin/Documents/GitHub/gbif_inbo/first_exploration_of_rgbif/gbif_example_typos_extreme.csv'
fpathIn = path
GBIFbackboneCSV_add_ursf(fpathIn, fpathOut = file.path(dirname(fpathIn), 'test_file_name.csv', fsep = .Platform$file.sep))
# output to csv
if(is.null(fpathOut) & fileOut) {
new_basepath = file.path(dirname(fpathIn), paste(file_path_sans_ext(basename(fpathIn)),'_ursf', '.', file_ext(basename(fpathIn)), sep=''), fsep = .Platform$file.sep)
write.table(dfOut, file = new_basepath, sep = sep)
}
dfIn <- read.table(file=fpathIn, header=TRUE, sep=",")
# Init output df
dfOut <- dfIn
# get keys for all
splist <- t(dfOut$scientificName)[1,]
keys <- sapply(splist, function(x) name_backbone(name=x)$speciesKey, USE.NAMES=FALSE)
# add speciedKey if requested
dfOut$speciesKey   <- sapply(splist, function(x) name_backbone(name=x)$speciesKey, USE.NAMES=FALSE)
# add the additional columns (fixed to specific job)
dfOut$usageKey     <- sapply(splist, function(x) name_backbone(name=x)$usageKey, USE.NAMES=FALSE)
dfOut$rank         <- sapply(splist, function(x) name_backbone(name=x)$rank, USE.NAMES=FALSE)
dfOut$status       <- sapply(splist, function(x) name_backbone(name=x)$status, USE.NAMES=FALSE)
dfOut$family       <- sapply(splist, function(x) name_backbone(name=x)$family, USE.NAMES=FALSE)
# risk of overwriting custom data
# TODO(ldekonin): maybe prevent overwrite of duplicate columns and add matching warning at function output
# output to csv
if(is.null(fpathOut) & fileOut) {
new_basepath = file.path(dirname(fpathIn), paste(file_path_sans_ext(basename(fpathIn)),'_ursf', '.', file_ext(basename(fpathIn)), sep=''), fsep = .Platform$file.sep)
write.table(dfOut, file = new_basepath, sep = sep)
}
new_basepath = file.path(dirname(fpathIn), paste(file_path_sans_ext(basename(fpathIn)),'_ursf', '.', file_ext(basename(fpathIn)), sep=''), fsep = .Platform$file.sep)
new_basepath
